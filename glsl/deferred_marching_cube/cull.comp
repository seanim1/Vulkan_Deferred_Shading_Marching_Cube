#version 450
//#extension GL_EXT_debug_printf : enable
struct InstanceData 
{
	vec3 pos;
	float vertexCount;
};

// Binding 0: Instance input data for culling
layout (binding = 0, std140) buffer Instances 
{
   InstanceData instances[ ];
};

// Same layout as VkDrawIndirectCommand
struct IndirectCommand 
{
	uint vertexCount;
	uint instanceCount;
	uint firstVertex;
	uint firstInstance;
};

// Binding 1: Multi draw output
layout (binding = 1, std430) writeonly buffer IndirectDraws
{
	IndirectCommand indirectDraws[ ];
};

// Binding 2: Uniform block object with matrices
layout (binding = 2) uniform UBO 
{
	mat4 projection;
	mat4 modelview;
	vec4 cameraPos;
	vec4 frustumPlanes[6];
} ubo;

// Binding 3: Indirect draw stats
layout (binding = 3) buffer UBOOut
{
	uint drawCount;
} uboOut;

bool frustumCheck(vec4 pos, float radius)
{
	// Check sphere against frustum planes
	for (int i = 0; i < 6; i++) 
	{
		if (dot(pos, ubo.frustumPlanes[i]) + radius < 0.0)
		{
			return false;
		}
	}
	return true;
}

layout (local_size_x = 1024) in;

void main()
{
	uint idx = gl_GlobalInvocationID.x;
	//debugPrintfEXT("gl_GlobalInvocationID.y: %d", gl_GlobalInvocationID.y);
	//debugPrintfEXT("InstanceData pos: <%f, %f, %f>", instances[idx].pos.x, instances[idx].pos.y, instances[idx].pos.z);
	vec4 pos = vec4(instances[idx].pos.xyz, 1.0);

	// Check if object is within current viewing frustum
	// 8.0 is radius of a chunk, (radius * 1.414) is a diagonal radius of the chunk
	if (frustumCheck(pos, 11.312))
	{
		indirectDraws[idx].instanceCount = 1;
		
		// Increase number of indirect draw counts
		atomicAdd(uboOut.drawCount, 1);
	}
	else
	{
		indirectDraws[idx].instanceCount = 0;
	}
	//debugPrintfEXT("instanceCount: %d", indirectDraws[idx].instanceCount);
}
